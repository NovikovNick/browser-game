[{"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/index.js":"1","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/App.js":"2","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/Board.js":"3","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/reducers/index.js":"4","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Player.js":"5","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/ActionTypes.js":"6","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/ReduxActions.js":"7","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/WebSocket.js":"8","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/reducers/players.js":"9","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/Controls.js":"10","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/service/service.js":"11","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/config.js":"12","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Polygon.js":"13","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Wall.js":"14","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Point.js":"15"},{"size":198,"mtime":1609956792533,"results":"16","hashOfConfig":"17"},{"size":5863,"mtime":1611001754653,"results":"18","hashOfConfig":"17"},{"size":4070,"mtime":1611001100423,"results":"19","hashOfConfig":"17"},{"size":45,"mtime":1609929310065,"results":"20","hashOfConfig":"17"},{"size":3360,"mtime":1611001231264,"results":"21","hashOfConfig":"17"},{"size":206,"mtime":1610019869300,"results":"22","hashOfConfig":"17"},{"size":830,"mtime":1610568391498,"results":"23","hashOfConfig":"17"},{"size":4046,"mtime":1611078882119,"results":"24","hashOfConfig":"17"},{"size":2146,"mtime":1610656136258,"results":"25","hashOfConfig":"17"},{"size":2434,"mtime":1610221866980,"results":"26","hashOfConfig":"17"},{"size":1885,"mtime":1610010644983,"results":"27","hashOfConfig":"17"},{"size":85,"mtime":1609963658799,"results":"28","hashOfConfig":"17"},{"size":313,"mtime":1611001132219,"results":"29","hashOfConfig":"17"},{"size":654,"mtime":1611001231252,"results":"30","hashOfConfig":"17"},{"size":217,"mtime":1611001125615,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1lgwz23",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/index.js",[],["65","66"],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/App.js",["67"],"import React from 'react';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport * as reducers from './store/reducers';\n// Importing Sass with Bootstrap CSS\nimport './App.scss';\n\nimport Board from \"./container/Board\";\nimport WebSocket from \"./container/WebSocket\";\nimport * as actions from \"./store/ReduxActions\";\nimport {Container} from \"react-bootstrap\";\nimport Controls from \"./container/Controls\";\n\n\nconst store = createStore(combineReducers(reducers), applyMiddleware(thunk));\n// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nfunction toScreenCoord(point) {\n    return {\n        d0:point.d0,\n        d1:point.d1\n    };\n}\n\nfunction interpolatePoints(p1, p2, mod) {\n    return toScreenCoord({\n        d0: p1.d0 + (p2.d0 - p1.d0) * mod,\n        d1: p1.d1 + (p2.d1 - p1.d1) * mod\n    });\n}\n\nfunction interpolatePolygon(p1, p2, mod) {\n\n    const points = [];\n    for (let i = 0; i < p1.points.length; i++) {\n        const p1Point = p1.points[i]\n        const p2Point = p2.points[i]\n        points.push(interpolatePoints(p2Point, p1Point, mod))\n    }\n    return {points: points}\n}\n\nfunction interpolateGameObject(p1, p2, mod) {\n\n    let transformed = {};\n    if(p1.rigidBody.transformed && p2.rigidBody.transformed) {\n        transformed = interpolatePolygon(p2.rigidBody.transformed, p1.rigidBody.transformed, mod);\n    }\n\n\n    return {\n        transform: {\n            rotationAngleRadian: p1.transform.rotationAngleRadian + (p2.transform.rotationAngleRadian - p1.transform.rotationAngleRadian) * mod,\n            position: interpolatePoints(p1.transform.position, p2.transform.position, mod)\n        },\n        rigidBody: {\n            ...p1.rigidBody,\n            transformed: transformed\n        }\n    };\n}\n\nfunction interpolatePlayer(p1, p2, mod) {\n\n    const character = {\n        ...p1,\n        gameObject: interpolateGameObject(p2.gameObject, p1.gameObject, mod)\n    };\n    return character;\n}\n\nlet timerId = setTimeout(function tick() {\n\n    const snapshots = store.getState().state.snapshots;\n\n    if (snapshots) {\n        const fst = snapshots[0]\n        const snd = snapshots[1]\n\n        if (fst && snd && fst.character && snd.character) {\n\n            const frame = fst.timestamp - snd.timestamp;\n            const now = new Date().getTime();\n            const delay = now - fst.timestamp;\n            const mod = frame < delay ? 1 : delay / frame;\n\n            // player\n            const character = interpolatePlayer(fst.character, snd.character, mod);\n\n            // enemies\n            const enemies = [];\n            {\n                const fstGroupedById = fst.enemies.reduce((r, a) => {\n                    r[a.sessionId] = a;\n                    return r;\n                }, {});\n\n                const sndGroupedById = snd.enemies.reduce((r, a) => {\n                    r[a.sessionId] = a;\n                    return r;\n                }, {});\n\n                for (const [sessionId, value] of Object.entries(fstGroupedById)) {\n                    if (sndGroupedById[sessionId]) {\n                        const p1 = value\n                        const p2 = sndGroupedById[sessionId]\n                        enemies.push(interpolatePlayer(p1, p2, mod));\n                    }\n                }\n            }\n\n            // projectiles\n            const projectiles = [];\n            {\n                const fstGroupedById = fst.projectiles.reduce((r, a) => {\n                    r[a.id] = a;\n                    return r;\n                }, {});\n                const sndGroupedById = snd.projectiles.reduce((r, a) => {\n                    r[a.id] = a;\n                    return r;\n                }, {});\n\n                for (const [id, value] of Object.entries(fstGroupedById)) {\n                    if (sndGroupedById[id]) {\n                        const p1 = value\n                        const p2 = sndGroupedById[id]\n\n                        projectiles.push({\n                            ...p1,\n                            gameObject: interpolateGameObject(p2.gameObject, p1.gameObject, mod)\n                        });\n                    }\n                }\n            }\n\n            // explosions\n            const explosions = fst.explosions.map(i => {\n                return {timestamp: now, point: toScreenCoord(i)}\n            })\n\n            // walls\n            const walls = []\n            {\n                const fstGroupedById = fst.walls.reduce((r, a) => {\n                    r[a.id] = a;\n                    return r;\n                }, {});\n                const sndGroupedById = snd.walls.reduce((r, a) => {\n                    r[a.id] = a;\n                    return r;\n                }, {});\n\n                for (const [id, value] of Object.entries(fstGroupedById)) {\n                    if (sndGroupedById[id]) {\n                        const p1 = value\n                        const p2 = sndGroupedById[id]\n\n                        walls.push(interpolateGameObject(p2, p1, mod));\n                    }\n                }\n            }\n            store.dispatch(actions.updateState(character, enemies, projectiles, explosions, walls));\n        }\n    }\n\n    timerId = setTimeout(tick, 15);\n}, 15);\n\nfunction App() {\n    return (\n        <Provider store={store}>\n\n            <WebSocket host={\"http://192.168.0.103:8080\"}/>\n            <Board/>\n\n            <Container className=\"p-3\">\n                <div className=\"row\">\n                    <nav className=\"offset-md-10 col-md-2 d-none d-md-block bg-light sidebar\">\n                        <Controls/>\n                    </nav>\n\n                    <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\"></main>\n\n                </div>\n            </Container>\n        </Provider>\n    );\n}\n\nexport default App;\n","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/Board.js",["68","69","70"],"import React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport * as Store from \"../store/ReduxActions\";\nimport Player from \"../component/Player\";\nimport Polygon from \"../component/Polygon\";\nimport Wall from \"../component/Wall\";\nimport Point from \"../component/Point\";\n\nfunction Grid({width, height, n}) {\n    const grid = [];\n    for (var i = 1; i < n; i++) {\n\n        const y = (height / n) * i;\n        const x = (width / n) * i;\n        const color = i % 2 != 0 ? \"#eee\" : \"#888\";\n\n        grid.push(<line key={\"v\" + i} x1=\"0\" y1={y} x2={width}  y2={y}      stroke={color}/>);\n        grid.push(<line key={\"h\" + i} x1={x} y1=\"0\" x2={x}      y2={height} stroke={color}/>);\n    }\n    return grid;\n}\n\nfunction random() {\n    const min = Math.ceil(0);\n    const max = Math.floor(800);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nconst p1 = [random(), random()]\nconst p2 = [random(), random()]\nconst p3 = [random(), random()]\nconst p4 = [random(), random()]\n\nfunction Line({p1, p2, color}) {\n    return <g>\n        <line stroke={color}\n              x1={p1[0]} x2={p2[0]}\n              y1={p1[1]} y2={p2[1]}/>\n        <circle cx={p1[0]} cy={p1[1]} r={5} fill={color}/>\n        <circle cx={p2[0]} cy={p2[1]} r={5} fill={color}/>\n    </g>;\n}\n\n/**\n * determinant for matrix [\n *   [a, c],\n *   [b, d]\n * ]\n * @param matrix [2][2]\n * @returns {number}\n */\nfunction det(matrix) {\n    const a = matrix[0][0], b = matrix[1][0], c = matrix[0][1], d = matrix[1][1];\n    return a * d - b * c;\n}\n\nfunction intersect(p1, p2, p3, p4) {\n\n    const x1 = p1[0], x2 = p2[0], x3 = p3[0], x4 = p4[0];\n    const y1 = p1[1], y2 = p2[1], y3 = p3[1], y4 = p4[1];\n\n    const uNumerator = det([\n        [x4 - x2, x4 - x3],\n        [y4 - y2, y4 - y3]\n    ])\n    const vNumerator = det([\n        [x1 - x2, x4 - x2],\n        [y1 - y2, y4 - y2]\n    ]);\n    const denominator = det([\n        [x1 - x2, x4 - x3],\n        [y1 - y2, y4 - y3]\n    ]);\n    const u = uNumerator / denominator;\n    const v = vNumerator / denominator;\n    return {\n        intersect: u > 0 && u < 1 && v > 0 && v < 1,\n        point: [u * (x1 - x2) + x2, u * (y1 - y2) + y2]\n    };\n}\nconst intersected = intersect(p1, p2, p3, p4);\nconsole.log(p1, p2, p3, p4, intersected)\n\nfunction Board({character, enemies, projectiles, explosions, walls}) {\n\n    const offset = [\n        character.gameObject.transform.position.d0 - window.innerWidth / 2,\n        character.gameObject.transform.position.d1 - window.innerHeight / 2\n    ]\n\n    const now = new Date().getTime();\n    return (\n        <svg version=\"1.1\"\n             baseProfile=\"full\"\n             xmlns=\"http://www.w3.org/2000/svg\">\n{/*\n            <Grid width={2000} height={2000} n={40}/>\n\n            <Line p1={p1} p2={p2} color={\"red\"}/>\n            <Line p1={p3} p2={p4} color={\"red\"}/>\n\n            {intersected.intersect && <circle cx={intersected.point[0]} cy={intersected.point[1]} r={5} fill={\"blue\"}/>}\n*/}\n            <Player offset={offset} character={character} isEnemy={false} color={\"blue\"}/>\n            {walls.map((wall, i) => <Wall offset={offset} key={i} gameObject={wall}/>)}\n            {enemies.map((item, i) => <Player offset={offset} key={i} character={item} isEnemy={true} color={\"red\"}/>)}\n            {explosions.map((explosion, i) => <Point offset={offset} key={i} data={[explosion.point.d0, explosion.point.d1]} radius={(now - explosion.timestamp) / 1000 * 60} color={\"yellow\"}/>)}\n            {projectiles.map((projectile, i) => projectile.gameObject && <Polygon offset={offset} key={i} polygon={projectiles[i].gameObject.rigidBody.transformed} color={\"red\"}/>)}\n\n        </svg>\n    );\n}\n\nconst mapStateToProps = state => ({\n    character: state.state.character,\n    enemies: state.state.enemies,\n    projectiles: state.state.projectiles,\n    explosions: state.state.explosions,\n    walls: state.state.walls\n});\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(Store, dispatch)\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/reducers/index.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Player.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/ActionTypes.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/ReduxActions.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/WebSocket.js",["71","72","73","74","75","76"],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/reducers/players.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/Controls.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/service/service.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/config.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Polygon.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Wall.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Point.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":170,"column":5,"nodeType":"83","messageId":"84","endLine":170,"endColumn":12},{"ruleId":"81","severity":1,"message":"85","line":11,"column":10,"nodeType":"83","messageId":"84","endLine":11,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":17,"column":29,"nodeType":"88","messageId":"89","endLine":17,"endColumn":31},{"ruleId":"81","severity":1,"message":"90","line":35,"column":10,"nodeType":"83","messageId":"84","endLine":35,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":22,"column":5,"nodeType":"93","messageId":"94","endLine":35,"endColumn":6},{"ruleId":"91","severity":1,"message":"92","line":40,"column":5,"nodeType":"93","messageId":"94","endLine":53,"endColumn":6},{"ruleId":"91","severity":1,"message":"92","line":61,"column":5,"nodeType":"93","messageId":"94","endLine":68,"endColumn":6},{"ruleId":"81","severity":1,"message":"82","line":109,"column":21,"nodeType":"83","messageId":"84","endLine":109,"endColumn":28},{"ruleId":"86","severity":1,"message":"95","line":121,"column":25,"nodeType":"88","messageId":"89","endLine":121,"endColumn":27},{"ruleId":"86","severity":1,"message":"95","line":122,"column":25,"nodeType":"88","messageId":"89","endLine":122,"endColumn":27},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'timerId' is assigned a value but never used.","Identifier","unusedVar","'Grid' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Line' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]