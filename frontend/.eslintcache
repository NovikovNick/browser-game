[{"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/index.js":"1","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/App.js":"2","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/Board.js":"3","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/reducers/index.js":"4","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Player.js":"5","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/ActionTypes.js":"6","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/ReduxActions.js":"7","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/WebSocket.js":"8","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/reducers/players.js":"9","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/Controls.js":"10","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/service/service.js":"11","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/config.js":"12","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Polygon.js":"13","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Wall.js":"14","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Point.js":"15","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/service/ShapeService.js":"16","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/service/GeometryService.js":"17"},{"size":198,"mtime":1609956792533,"results":"18","hashOfConfig":"19"},{"size":8110,"mtime":1611442669208,"results":"20","hashOfConfig":"19"},{"size":3817,"mtime":1611426969219,"results":"21","hashOfConfig":"19"},{"size":45,"mtime":1609929310065,"results":"22","hashOfConfig":"19"},{"size":3151,"mtime":1611426969227,"results":"23","hashOfConfig":"19"},{"size":206,"mtime":1610019869300,"results":"24","hashOfConfig":"19"},{"size":830,"mtime":1610568391498,"results":"25","hashOfConfig":"19"},{"size":4034,"mtime":1611347263829,"results":"26","hashOfConfig":"19"},{"size":2104,"mtime":1611441848309,"results":"27","hashOfConfig":"19"},{"size":2434,"mtime":1610221866980,"results":"28","hashOfConfig":"19"},{"size":1885,"mtime":1610010644983,"results":"29","hashOfConfig":"19"},{"size":85,"mtime":1609963658799,"results":"30","hashOfConfig":"19"},{"size":276,"mtime":1611392810658,"results":"31","hashOfConfig":"19"},{"size":510,"mtime":1611426969239,"results":"32","hashOfConfig":"19"},{"size":217,"mtime":1611001125615,"results":"33","hashOfConfig":"19"},{"size":466,"mtime":1611316182124,"results":"34","hashOfConfig":"19"},{"size":334,"mtime":1611394057702,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1lgwz23",{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/index.js",[],["75","76"],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/App.js",["77","78","79","80","81","82"],"import React from 'react';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport * as reducers from './store/reducers';\n// Importing Sass with Bootstrap CSS\nimport './App.scss';\n\nimport Board from \"./container/Board\";\nimport WebSocket from \"./container/WebSocket\";\nimport * as actions from \"./store/ReduxActions\";\nimport {Container} from \"react-bootstrap\";\nimport Controls from \"./container/Controls\";\nimport * as ShapeService from \"./service/ShapeService\";\nimport * as GeometryService from \"./service/GeometryService\";\n\n\nconst store = createStore(combineReducers(reducers), applyMiddleware(thunk));\n// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nfunction interpolateNumbers(p1, p2, mod) {\n    return p1 + (p2 - p1) * mod;\n}\n\nfunction interpolatePoints(p1, p2, mod) {\n    return [\n        interpolateNumbers(p1[0], p2[0], mod),\n        interpolateNumbers(p1[1], p2[1], mod)\n    ];\n}\n\nfunction interpolateGameObject(p1, p2, mod) {\n\n    return {\n        id: p1.id,\n        pos: interpolatePoints(p1.pos, p2.pos, mod),\n        rot: interpolateNumbers(p1.rot, p2.rot, mod),\n        shape: p1.shape\n    };\n}\n\nfunction interpolatePlayer(p1, p2, mod) {\n\n    const character = {\n        ...p1,\n        gameObject: interpolateGameObject(p2.obj, p1.obj, mod)\n    };\n    return character;\n}\n\nlet timerId = setTimeout(function tick() {\n\n    const center = [window.innerWidth / 2, window.innerHeight / 2]\n    const state = store.getState().state;\n    const snapshots = state.snapshots;\n    const walls = state.walls;\n\n    if (snapshots) {\n        const fst = snapshots[0]\n        const snd = snapshots[1]\n\n        if (fst && snd && fst.character && snd.character) {\n\n            const frame = fst.timestamp - snd.timestamp;\n            const now = new Date().getTime();\n            const delay = now - fst.timestamp;\n            const mod = frame < delay ? 1 : delay / frame;\n\n            // player\n            const character = interpolatePlayer(fst.character, snd.character, mod);\n            const offset = [\n                character.gameObject.pos[0] - center[0],\n                character.gameObject.pos[1] - center[1]\n            ];\n            if (character) {\n                character.gameObject.pos = center;\n                character.gameObject.shape = ShapeService.getPlayerShape().map(p => {\n                    return GeometryService.rotate(\n                        [p[0] + center[0], p[1] + center[1]],\n                        character.gameObject.rot,\n                        center\n                    );\n                });\n            }\n\n            // enemies\n            const enemies = [];\n            {\n                const fstGroupedById = fst.enemies.reduce((r, a) => {\n                    r[a.obj.id] = a;\n                    return r;\n                }, {});\n\n                const sndGroupedById = snd.enemies.reduce((r, a) => {\n                    r[a.obj.id] = a;\n                    return r;\n                }, {});\n\n                for (const [id, value] of Object.entries(fstGroupedById)) {\n                    if (sndGroupedById[id]) {\n                        const p1 = value\n                        const p2 = sndGroupedById[id]\n                        const item = interpolatePlayer(p1, p2, mod);\n\n                        const pos = [item.gameObject.pos[0] - offset[0], item.gameObject.pos[1] - offset[1]];\n                        item.gameObject.pos = pos;\n                        item.gameObject.shape = ShapeService.getPlayerShape().map(p => {\n                            return GeometryService.rotate(\n                                [p[0] + pos[0], p[1] + pos[1]],\n                                item.gameObject.rot,\n                                pos\n                            );\n                        });\n\n                        enemies.push(item);\n                    }\n                }\n            }\n\n            // projectiles\n            const projectiles = [];\n            {\n                const fstGroupedById = fst.projectiles.reduce((r, a) => {\n                    r[a.id] = a;\n                    return r;\n                }, {});\n                const sndGroupedById = snd.projectiles.reduce((r, a) => {\n                    r[a.id] = a;\n                    return r;\n                }, {});\n\n                for (const [id, value] of Object.entries(fstGroupedById)) {\n                    if (sndGroupedById[id]) {\n                        const p1 = value\n                        const p2 = sndGroupedById[id]\n\n                        const item = interpolateGameObject(p2, p1, mod);\n\n                        const pos = [item.pos[0] - offset[0], item.pos[1] - offset[1]];\n                        item.pos = pos;\n                        item.shape = ShapeService.getBulletShape().map(p => {\n                            return GeometryService.rotate(\n                                [p[0] + pos[0], p[1] + pos[1]],\n                                item.rot,\n                                pos\n                            );\n                        });\n\n                        projectiles.push(item);\n                    }\n                }\n            }\n\n            // explosions\n            const explosions = []; /*fst.explosions.map(i => {\n                return {timestamp: now, point: i}\n            })*/\n\n            // walls\n            const updatedWalls = [];\n            {\n                const wallObjIds = new Set();\n                walls.forEach(w => wallObjIds.add(w.id));\n                fst.walls.length > 0 && fst.walls.forEach(w => wallObjIds.add(w.id))\n                snd.walls.length > 0 && snd.walls.forEach(w => wallObjIds.add(w.id))\n\n                const wallGroupedById = walls.reduce((r, a) => {r[a.id] = a;return r;}, {});\n                const fstGroupedById = fst.walls.reduce((r, a) => {r[a.id] = a;return r;}, {});\n                const sndGroupedById = snd.walls.reduce((r, a) => {r[a.id] = a;return r;}, {});\n\n                wallObjIds.forEach(id => {\n\n                    const isExist = wallGroupedById[id] != undefined;\n                    const isUpdated = fstGroupedById[id] != undefined && sndGroupedById[id] != undefined;\n                    const isCreated = fstGroupedById[id] != undefined && wallGroupedById[id] == undefined;\n                    const isRemoved = fst.removed && fst.removed.includes(id);\n\n                    if(!isRemoved && (isExist || isUpdated || isCreated)) {\n\n                        const wall = isUpdated\n                            ? interpolateGameObject(sndGroupedById[id], fstGroupedById[id], mod)\n                            : isCreated ? fstGroupedById[id] : wallGroupedById[id];\n\n                        const wallOffset = [wall.pos[0] - offset[0], wall.pos[1] - offset[1]];\n\n                        updatedWalls.push({\n                            id: id,\n                            pos: wall.pos,\n                            rot: wall.rot,\n                            shape: ShapeService.getWallShape().map(p => {\n                                return GeometryService.rotate([p[0] + wallOffset[0], p[1] + wallOffset[1]], wall.rot, wallOffset);\n                            })\n                        })\n                    }\n                })\n            }\n\n            console.log(fst.removed)\n\n            store.dispatch(actions.updateState(character, enemies, projectiles, explosions, updatedWalls));\n        }\n    }\n\n    timerId = setTimeout(tick, 15);\n}, 15);\n\nfunction App() {\n    return (\n        <Provider store={store}>\n\n            <WebSocket host={\"http://192.168.0.103:8080\"}/>\n            <Board/>\n\n            <Container className=\"p-3\">\n                <div className=\"row\">\n                    <nav className=\"offset-md-10 col-md-2 d-none d-md-block bg-light sidebar\">\n                        <Controls/>\n                    </nav>\n\n                    <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\"></main>\n\n                </div>\n            </Container>\n        </Provider>\n    );\n}\n\nexport default App;\n","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/Board.js",["83","84","85","86","87"],"import React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport * as Store from \"../store/ReduxActions\";\nimport Player from \"../component/Player\";\nimport Polygon from \"../component/Polygon\";\nimport Wall from \"../component/Wall\";\nimport Point from \"../component/Point\";\n\nfunction Grid({width, height, n}) {\n    const grid = [];\n    for (var i = 1; i < n; i++) {\n\n        const y = (height / n) * i;\n        const x = (width / n) * i;\n        const color = i % 2 != 0 ? \"#eee\" : \"#888\";\n\n        grid.push(<line key={\"v\" + i} x1=\"0\" y1={y} x2={width}  y2={y}      stroke={color}/>);\n        grid.push(<line key={\"h\" + i} x1={x} y1=\"0\" x2={x}      y2={height} stroke={color}/>);\n    }\n    return grid;\n}\n\nfunction random() {\n    const min = Math.ceil(0);\n    const max = Math.floor(800);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nconst p1 = [random(), random()]\nconst p2 = [random(), random()]\nconst p3 = [random(), random()]\nconst p4 = [random(), random()]\n\nfunction Line({p1, p2, color}) {\n    return <g>\n        <line stroke={color}\n              x1={p1[0]} x2={p2[0]}\n              y1={p1[1]} y2={p2[1]}/>\n        <circle cx={p1[0]} cy={p1[1]} r={5} fill={color}/>\n        <circle cx={p2[0]} cy={p2[1]} r={5} fill={color}/>\n    </g>;\n}\n\n/**\n * determinant for matrix [\n *   [a, c],\n *   [b, d]\n * ]\n * @param matrix [2][2]\n * @returns {number}\n */\nfunction det(matrix) {\n    const a = matrix[0][0], b = matrix[1][0], c = matrix[0][1], d = matrix[1][1];\n    return a * d - b * c;\n}\n\nfunction intersect(p1, p2, p3, p4) {\n\n    const x1 = p1[0], x2 = p2[0], x3 = p3[0], x4 = p4[0];\n    const y1 = p1[1], y2 = p2[1], y3 = p3[1], y4 = p4[1];\n\n    const uNumerator = det([\n        [x4 - x2, x4 - x3],\n        [y4 - y2, y4 - y3]\n    ])\n    const vNumerator = det([\n        [x1 - x2, x4 - x2],\n        [y1 - y2, y4 - y2]\n    ]);\n    const denominator = det([\n        [x1 - x2, x4 - x3],\n        [y1 - y2, y4 - y3]\n    ]);\n    const u = uNumerator / denominator;\n    const v = vNumerator / denominator;\n    return {\n        intersect: u > 0 && u < 1 && v > 0 && v < 1,\n        point: [u * (x1 - x2) + x2, u * (y1 - y2) + y2]\n    };\n}\nconst intersected = intersect(p1, p2, p3, p4);\nconsole.log(p1, p2, p3, p4, intersected)\n\nfunction Board({character, enemies, projectiles, explosions, walls}) {\n\n    const now = new Date().getTime();\n    return (\n        <svg version=\"1.1\"\n             baseProfile=\"full\"\n             xmlns=\"http://www.w3.org/2000/svg\">\n{/*\n            <Grid width={2000} height={2000} n={40}/>\n\n            <Line p1={p1} p2={p2} color={\"red\"}/>\n            <Line p1={p3} p2={p4} color={\"red\"}/>\n\n            {intersected.intersect && <circle cx={intersected.point[0]} cy={intersected.point[1]} r={5} fill={\"blue\"}/>}\n*/}\n            <Player character={character} isEnemy={false} color={\"blue\"}/>\n\n            {enemies.map((item, i) => <Player key={i} character={item} isEnemy={true} color={\"red\"}/>)}\n            {walls.map((wall, i) => <Wall key={i} gameObject={wall}/>)}\n            {projectiles.map((projectile, i) => projectile && <Polygon key={i} polygon={projectile.shape} color={\"red\"}/>)}\n\n            {/*\n            {explosions.map((explosion, i) => <Point offset={offset} key={i} data={[explosion.point.d0, explosion.point.d1]} radius={(now - explosion.timestamp) / 1000 * 60} color={\"yellow\"}/>)}\n            */}\n        </svg>\n    );\n}\n\nconst mapStateToProps = state => ({\n    character: state.state.character,\n    enemies: state.state.enemies,\n    projectiles: state.state.projectiles,\n    explosions: state.state.explosions,\n    walls: state.state.walls\n});\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(Store, dispatch)\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/reducers/index.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Player.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/ActionTypes.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/ReduxActions.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/WebSocket.js",["88","89","90","91","92","93"],"import {Client} from \"@stomp/stompjs\";\nimport * as SockJS from 'sockjs-client';\n\nimport React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport * as Store from \"../store/ReduxActions\";\n\nconst inputState = {\n    ackSN: null,\n    leftBtnClicked: false,\n    rightBtnClicked: false,\n    rotationAngleRadian: 0,\n    isPressedW: false,\n    isPressedA: false,\n    isPressedS: false,\n    isPressedD: false\n}\n\nfunction onKeyPress(e) {\n    switch (e.keyCode) {\n        case 119:\n            inputState.isPressedW = true;\n            break;\n        case 97:\n            inputState.isPressedA = true;\n            break;\n        case 100:\n            inputState.isPressedD = true;\n            break;\n        case 115:\n            inputState.isPressedS = true;\n            break;\n    }\n};\n\nfunction onKeyUp(e) {\n\n    switch (e.keyCode) {\n        case 87:\n            inputState.isPressedW = false;\n            break;\n        case 65:\n            inputState.isPressedA = false;\n            break;\n        case 68:\n            inputState.isPressedD = false;\n            break;\n        case 83:\n            inputState.isPressedS = false;\n            break;\n    }\n};\n\ninputState.leftBtnClicked =  inputState.rightBtnClicked = false;\n\n\nfunction onMouseUpdate(e) {\n\n    switch (e.which) {\n        case 1:\n            inputState.leftBtnClicked = true;\n            break;\n        case 3:\n            inputState.rightBtnClicked = true;\n            break;\n    }\n\n    inputState.rotationAngleRadian = Math.atan2(window.innerHeight / 2 - e.pageY, window.innerWidth / 2 - e.pageX);\n}\n\nconst ENDPOINT = {\n    APP_NAME: \"/game\",\n    TOPIC_PLAYER_LIST: \"/secured/user/queue/specific-user-user\",\n    TOPIC_PLAYER_UPDATE: '/frontend/update'\n};\n\nconst webSocket = new Client();\n\nfunction WebSocket({host, actions}) {\n\n    useEffect(() => {\n        webSocket.configure({\n            webSocketFactory: () => new SockJS(host + ENDPOINT.APP_NAME),\n            onConnect: (frame) => {\n\n                var url = webSocket.webSocket._transport.url;\n                url = url.split(\"/\");\n                var sessionId = url[url.length - 2];\n                webSocket.sessionId = sessionId;\n\n                actions.updateSessionId(sessionId)\n                actions.changePlayerName({sessionId: sessionId})\n\n                webSocket.subscribe(ENDPOINT.TOPIC_PLAYER_LIST + sessionId, message => {\n                    const serverSnapshot = JSON.parse(message.body);\n                    inputState.ackSN = serverSnapshot.sn;\n                    actions.addSnapshot(serverSnapshot);\n                });\n\n                let timerId = setTimeout(function tick() {\n\n                    webSocket.publish({\n                        destination: ENDPOINT.TOPIC_PLAYER_UPDATE,\n                        body: JSON.stringify(inputState)\n                    });\n\n                    timerId = setTimeout(tick, 40); // (*)\n                }, 40);\n            },\n            onWebSocketError: e => console.error(\"Chat service is unavailable\", e),\n            // debug: str => console.log(new Date(), str)\n        });\n        webSocket.activate();\n\n        document.addEventListener('mousedown', onMouseUpdate, false);\n        document.addEventListener('mousemove', onMouseUpdate, false);\n        document.addEventListener('mouseenter', onMouseUpdate, false);\n        document.addEventListener('mousedown', e => {\n            if (e.which == 1) inputState.leftBtnClicked = true;\n            if (e.which == 3) inputState.rightBtnClicked = true;\n        });\n        document.addEventListener('mouseup', e => {\n            inputState.leftBtnClicked = inputState.rightBtnClicked = false;\n        });\n\n\n        document.addEventListener('keypress', onKeyPress, false);\n        document.addEventListener('keyup', onKeyUp, false);\n    })\n\n    return (\n        <div/>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(Store, dispatch)\n});\nexport default connect(null, mapDispatchToProps)(WebSocket);\n","/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/store/reducers/players.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/container/Controls.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/service/service.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/config.js",[],["94","95"],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Polygon.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Wall.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/component/Point.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/service/ShapeService.js",[],"/home/nicknovikov/WORKSPACE/small-test-server/frontend/src/service/GeometryService.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":174,"column":57,"nodeType":"102","messageId":"103","endLine":174,"endColumn":59},{"ruleId":"100","severity":1,"message":"101","line":175,"column":58,"nodeType":"102","messageId":"103","endLine":175,"endColumn":60},{"ruleId":"100","severity":1,"message":"101","line":175,"column":93,"nodeType":"102","messageId":"103","endLine":175,"endColumn":95},{"ruleId":"100","severity":1,"message":"101","line":176,"column":58,"nodeType":"102","messageId":"103","endLine":176,"endColumn":60},{"ruleId":"100","severity":1,"message":"104","line":176,"column":94,"nodeType":"102","messageId":"103","endLine":176,"endColumn":96},{"ruleId":"105","severity":1,"message":"106","line":205,"column":5,"nodeType":"107","messageId":"108","endLine":205,"endColumn":12},{"ruleId":"105","severity":1,"message":"109","line":9,"column":8,"nodeType":"107","messageId":"108","endLine":9,"endColumn":13},{"ruleId":"105","severity":1,"message":"110","line":11,"column":10,"nodeType":"107","messageId":"108","endLine":11,"endColumn":14},{"ruleId":"100","severity":1,"message":"101","line":17,"column":29,"nodeType":"102","messageId":"103","endLine":17,"endColumn":31},{"ruleId":"105","severity":1,"message":"111","line":35,"column":10,"nodeType":"107","messageId":"108","endLine":35,"endColumn":14},{"ruleId":"105","severity":1,"message":"112","line":87,"column":11,"nodeType":"107","messageId":"108","endLine":87,"endColumn":14},{"ruleId":"113","severity":1,"message":"114","line":22,"column":5,"nodeType":"115","messageId":"116","endLine":35,"endColumn":6},{"ruleId":"113","severity":1,"message":"114","line":40,"column":5,"nodeType":"115","messageId":"116","endLine":53,"endColumn":6},{"ruleId":"113","severity":1,"message":"114","line":61,"column":5,"nodeType":"115","messageId":"116","endLine":68,"endColumn":6},{"ruleId":"105","severity":1,"message":"106","line":109,"column":21,"nodeType":"107","messageId":"108","endLine":109,"endColumn":28},{"ruleId":"100","severity":1,"message":"104","line":121,"column":25,"nodeType":"102","messageId":"103","endLine":121,"endColumn":27},{"ruleId":"100","severity":1,"message":"104","line":122,"column":25,"nodeType":"102","messageId":"103","endLine":122,"endColumn":27},{"ruleId":"96","replacedBy":"117"},{"ruleId":"98","replacedBy":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-unused-vars","'timerId' is assigned a value but never used.","Identifier","unusedVar","'Point' is defined but never used.","'Grid' is defined but never used.","'Line' is defined but never used.","'now' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["119"],["120"],"no-global-assign","no-unsafe-negation"]